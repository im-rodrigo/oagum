//this is for API



public interface IRepository<TModel> where TModel : class
    {

        bool Add(TModel Tmodel);

        bool Update(TModel Tmodel);

        bool Delete(int Id);

        TModel Find(int Id);
    }



public abstract class RepositoryBase<TModel> : IRepository<TModel> where TModel : class
    {
        public UsersContext dbContext;
        public RepositoryBase()
        {
            dbContext = new UsersContext();
        }
        public virtual bool Add(TModel Tmodel) { return false; }

        public virtual bool Update(TModel Tmodel) { return false; }

        public virtual bool Delete(int Id) { return false; }

        public virtual TModel Find(int Id) { return default(TModel); }


        ~RepositoryBase()
        {
            if (dbContext != null)
            {
                dbContext.Dispose();
            }
        }
    }