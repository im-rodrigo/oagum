using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Net;
using PagedList;
using oagum0._01.Models;

namespace oagum0._01.Controllers                          //name of file is oagum0._01, it will add a library include controllers
{
    public class SearchController : Controller            //SearchController is a new controller,control methods is action methods, they will return action result
    {
        private ArticleAuthorRelationshipEntities db = new ArticleAuthorRelationshipEntities(); //define a new ArticleAuthorRelationshipEntities named db
        private SearchViewModel searchClient = new SearchViewModel();           //define a SearchViewModel named searchClient
        // GET: /Search/
        public ActionResult Index()                                  //the Index method will return a string with a message that is hard-coded in the controller class,                                                                        in this index method, it will create a view template file using the Razor view engine
                                                                       Razor-based view templates have a .cshtml file extension, and provide an elegant way to create                                                                        HTML output using C#,Razor minimizes the number of characters and keystrokes 
                                                                       required when writing a view template, and enables a fast fluid coding workflow  
        {
            var articles = db.T_Article.ToList();                    //define article to get all data from T_Article
            
            ViewBag.TotalCount = articles.Count();                   //ViewBag can transport data from controller to view. ViewBag.TotalCount means transport total                                                                        amount of data.  This segment means transport all content of articles to view
            return View();                                           //return a View object, it will use a view template to generate an HTML response to the browser
        }

        // GET: /Search/Results?searchString=radiation
        [HttpGet]
        public ActionResult Results(string searchString, string filterString, int? pageNo)    //define Results action method
        {
            //searchClient.CurrentPage = pageNo;

            var articles = from article in db.T_Article              //define articles which is article come from T_Article
                           select article;

            ViewBag.TotalCount = articles.Count();                    //ViewBag can transport data from controller to view.ViewBag.TotalCount means transport total                                                                               amount of data.  This segment means transport all content of articles to view

            if (searchString != null)                                //if there have no article
            {
                pageNo = 1;                                          //when there have no article, make pageNo=1
                //ViewBag.SearchString = searchString;
            }
            else
            {
                searchString = filterString;                         //if searchString have content, make searchString = filterString
            }

            ViewBag.FilterString = searchString;                     //transport searchstring to view
            //var querysubstring = searchString.Split('&');

            if (!String.IsNullOrEmpty(searchString))                 //under condition that searchString is not null or empty
            {
                articles = articles.Where(s => s.Title.Contains(searchString));   //make articles equal to the articles which contain title named searchString 
            }

            ViewBag.SearchCount = articles.Count();                  //after we search content we need, we transport what we find to view

            int elemPerPage = 1;                                     //make elemPerPage = 1
            int numOfPage = (pageNo ?? 1);                           //if pageNo is not null, make numOfPage=pageNo, else numOfPage=1
            var res = articles.OrderBy(p => p.Title).ToPagedList(numOfPage, elemPerPage);//make res as articles ordered ascendingly, and it will only contain                                                                                          elemPerPage max of articles
            return View(res);                                                             //transport res to view

            //return View(articles.OrderBy(p => p.Title).Skip((searchClient.CurrentPage - 1)*20).Take(searchClient.CurrentPage*20));
        }

        // GET: /Search/Details/5
        public ActionResult Details(int? id)                         //define Details action method                     
        {
            if (id == null)                                          //if this id can not work
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);             //return a error
            }

            T_Article t_article = db.T_Article.Find(id);                                //make t_article as T_Article which is belong to id
            if (t_article == null)                              //if this t_article is not exist
            {
                return HttpNotFound();                          //return http can not found
            }

            var authors =                                       //define authors 
                (from author in db.T_Author                     //it must start with "from" 
                 join authorarticle in db.T_ArticleAuthor       //make what selected connect with authorarticle in db.T_ArticleAuthor
                 on author.ID equals authorarticle.AuthorId     //it is precondition of join or connection,the precondition of join is author.ID equals                                                                   authorarticle.AuthorId
                 where (authorarticle.ArticleId == id)          //return elements authorarticle.ArticleId which equal to id           
                 select new                                      //select new means select author.Name
                 {
                     author.Name
                 });
          
            ViewBag.Authors = authors;                          //transport authors to view
            return View(t_article);                             //transport t_article suit to precondition to view
        }

	}
}